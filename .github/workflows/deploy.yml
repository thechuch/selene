name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: selene-c0c22
  SERVICE_NAME: selene-app
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Fix package.json
      run: |
        echo '{
          "name": "my-nextjs-app",
          "version": "0.1.0",
          "private": true,
          "scripts": {
            "dev": "next dev",
            "build": "next build",
            "start": "next start -p $PORT",
            "lint": "next lint"
          },
          "dependencies": {
            "date-fns": "^4.1.0",
            "firebase": "^11.0.2",
            "firebase-admin": "^13.0.1",
            "form-data": "^4.0.0",
            "next": "15.0.3",
            "openai": "^4.73.1",
            "react": "^18.2.0",
            "react-dom": "^18.2.0",
            "react-icons": "^5.3.0",
            "socket.io": "^4.8.1",
            "socket.io-client": "^4.8.1"
          },
          "devDependencies": {
            "@types/node": "^20",
            "@types/react": "^18",
            "@types/react-dom": "^18",
            "eslint": "^8",
            "eslint-config-next": "15.0.3",
            "postcss": "^8",
            "tailwindcss": "^3.4.1",
            "typescript": "^5"
          }
        }' > package.json

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm install
        echo "Building application..."
        npm run build

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build and Push Docker image
      run: |
        echo "Building Docker image..."
        docker build \
          --no-cache \
          --build-arg OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          --build-arg FIREBASE_PROJECT_ID="${{ env.PROJECT_ID }}" \
          --build-arg FIREBASE_CLIENT_EMAIL="${{ secrets.FIREBASE_CLIENT_EMAIL }}" \
          --build-arg FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}" \
          -t "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" \
          .
        
        echo "Pushing Docker image..."
        docker push "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" \
          --platform managed \
          --region ${{ env.REGION }} \
          --project ${{ env.PROJECT_ID }} \
          --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
          --set-env-vars="FIREBASE_PROJECT_ID=${{ env.PROJECT_ID }}" \
          --set-env-vars="FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" \
          --set-env-vars="FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }}" \
          --allow-unauthenticated